input_datasets:
    qsiprep:
        required_files:
            - "*_qsiprep*.zip"
        is_zipped: true
        origin_url: "/cbica/projects/executive_function/EF_dataset/derivatives/qsiprep_BABS_EF_full_project_outputs"
        path_in_babs: inputs/data/qsiprep
        unzipped_path_containing_subject_dirs: "qsiprep"

# Files to be copied into the datalad dataset:
imported_files:
    # Change original_path to the path to the file on your local machine
    - original_path: "/cbica/projects/executive_function/EF_dataset/code/recon_spec.yaml"
      analysis_path: "code/recon_spec.yaml"
    - original_path: "/cbica/software/external/freesurfer/centos7/5.3.0/license.txt"
      analysis_path: "code/license.txt"

# Arguments in `singularity run`:
bids_app_args:
    $SUBJECT_SELECTION_FLAG: "--participant-label"
    -w: "$BABS_TMPDIR"
    --stop-on-first-crash: ""
    --fs-license-file: "code/license.txt"
    -vv: ""
    --input-type: "qsiprep"
    --recon-spec: '"${PWD}"/code/recon_spec.yaml'
    --output-resolution: "1.5"
    --nthreads: "8"
    --omp-nthreads: "8"

# Arguments that are passed directly to singularity/apptainer:
singularity_args:
    - --containall
    - --writable-tmpfs
    - -B /cbica/projects/executive_function/EF_dataset/code/recon_spec.yaml:/code/recon_spec.yaml

# Output foldername(s) to be zipped, and the BIDS App version to be included in the zip filename(s):
#   As qsirecon will use BIDS output layout, we need to ask BABS to create a folder 'qsirecon' to wrap all derivatives:
all_results_in_one_zip: true
zip_foldernames:
    # folder 'qsirecon' will be zipped into 'sub-xx_(ses-yy_)qsirecon-1-1-0.zip'
    qsirecon: "1-1-0"

# How much cluster resources it needs:
cluster_resources:
    interpreting_shell: "/bin/bash"
    hard_runtime_limit: "24:00:00"
    temporary_disk_space: 200G
    customized_text: |
        #SBATCH -p all
        #SBATCH --nodes=1
        #SBATCH --ntasks=1
        #SBATCH --cpus-per-task=8
        #SBATCH --mem=32G
        #SBATCH --propagate=NONE


# Activate environment so we have access to Datalad
script_preamble: |
    eval "$(micromamba shell hook --shell bash)"
    micromamba activate babs

# Where to run the jobs:
job_compute_space: "${TMP}"
