
# Define the input datasets
input_datasets:
    BIDS:
        required_files:
            - "func/*_bold.nii*"
            - "anat/*_T1w.nii*"
        is_zipped: false
        origin_url: "/cbica/projects/executive_function/data/bids/EF_bids_data_DataLad"
        path_in_babs: inputs/data/BIDS
    fmriprep_anat:
        required_files:
            - "*fmriprep_anat*.zip"
        is_zipped: true
        origin_url: "/cbica/projects/executive_function/EF_dataset/derivatives/fmriprepANAT_BABS_EF_full_project_outputs"
        path_in_babs: inputs/data/fmriprep_anat

bids_app_args:
    $SUBJECT_SELECTION_FLAG: "--participant-label"
    -w: "$BABS_TMPDIR"
    --stop-on-first-crash: ""
    --fs-license-file: "/cbica/software/external/freesurfer/centos7/5.3.0/license.txt" # [FIX ME] path to FreeSurfer license file
    --output-spaces: "func T1w MNI152NLin6Asym:res-2"
    --force: bbr
    --skip-bids-validation: ""
    -vv: ""
    --cifti-output: "91k"
    --n_cpus: "4"
    --mem-mb: "30000"
    --fs-subjects-dir: "${PWD}/inputs/data/fmriprep_anat/fmriprep_anat/sourcedata/freesurfer" #replace with path to your freesurfer results from fmriprep_anat

# Arguments that are passed directly to singularity/apptainer:
singularity_args:
    - --containall
    - --writable-tmpfs

# Output foldername(s) to be zipped, and the BIDS App version to be included in the zip filename(s):
#   As fMRIPrep will use BIDS output layout, we need to ask BABS to create a folder 'fmriprep_anat' to wrap all derivatives:
all_results_in_one_zip: true
zip_foldernames:
    fmriprep_func: "25-0-0" # folder 'fmriprep_func' will be zipped into 'sub-xx_(ses-yy_)fmriprep_func-24-1-1.zip'

# How much cluster resources it needs:
cluster_resources:
    interpreting_shell: "/bin/bash"
    hard_runtime_limit: "7:00:00"
    temporary_disk_space: 200G
    customized_text: |
        #SBATCH -p all
        #SBATCH --nodes=1
        #SBATCH --ntasks=1
        #SBATCH --cpus-per-task=4
        #SBATCH --mem=30G
        #SBATCH --propagate=NONE

# Necessary commands to be run first:
#   [FIX ME] change or add commands for setting up the virtual environment, for loading necessary modules, etc
script_preamble: |
    eval "$(micromamba shell hook --shell bash)"
    micromamba activate babs
    
# Where to run the jobs:
job_compute_space: "${TMP}" # [FIX ME] replace "/path/to/temporary_compute_space" with yours

# Alert messages that might be found in log files of failed jobs:
#   These messages may be helpful for debugging errors in failed jobs.
alert_log_messages:
    stdout:
        - "Excessive topologic defect encountered"
        - "Cannot allocate memory"
        - "mris_curvature_stats: Could not open file"
        - "Numerical result out of range"
        - "fMRIPrep failed"
